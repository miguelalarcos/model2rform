// Generated by CoffeeScript 1.6.1
(function() {
  var Model, SubModel, dct_from_modifier,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  dct_from_modifier = function(modifier) {
    var attr, dct, name;
    if (modifier['$set']) {
      dct = modifier['$set'];
    } else {
      dct = {};
      for (name in modifier['$push']) {
        for (attr in modifier['$push'][name]) {
          dct[name + '.' + attr] = modifier['$push'][name][attr];
        }
      }
    }
    return dct;
  };

  Model = (function() {

    function Model() {}

    Model._path = null;

    Model.constructor = function(obj, initials) {
      var attr, func, val, value, _i, _j, _len, _len1, _ref, _ref1;
      if (initials == null) {
        initials = false;
      }
      obj._dirty = [];
      if (initials) {
        console.log('initials', initials);
        for (attr in this._initials[initials]) {
          console.log(attr);
          value = this._initials[initials][attr];
          if (value === moment) {
            value = moment().toDate();
          } else {
            if (typeof value === 'function') {
              value = value();
            }
          }
          obj[attr] = value;
          obj._dirty.push(attr);
        }
      }
      _ref = this._attrs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        try {
          val = obj[attr];
          _ref1 = this[attr].slice(1);
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            func = _ref1[_j];
            func(val);
          }
          obj['_error_' + attr] = '';
        } catch (error) {
          obj['_error_' + attr] = error;
        }
      }
      return obj;
    };

    Model.validate = function(obj, id) {
      var attr, attrs_obj, dct, func, klass, ok_for_requireds, path, path_, req, requireds, v, val, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      if (_.isEmpty(obj)) {
        return false;
      }
      path_ = null;
      for (attr in obj) {
        if (path_ === null) {
          path_ = attr.split('.').slice(0, -1).join('.');
          continue;
        }
        path = attr.split('.').slice(0, -1).join('.');
        if (path !== path_) {
          return false;
        }
        path_ = path;
      }
      ok_for_requireds = false;
      for (attr in obj) {
        klass = this;
        value = obj[attr];
        path = attr.split('.').slice(0, -1).join('.');
        _ref = attr.split('.');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (!isNaN(v)) {
            continue;
          }
          if (attr === '_id') {
            if (typeof value === 'string') {
              continue;
            } else {
              return false;
            }
          }
          if (__indexOf.call(klass._attrs, v) >= 0) {
            try {
              val = klass[v][0](value);
              _ref1 = klass[v].slice(1);
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                func = _ref1[_j];
                func(val);
              }
            } catch (error) {
              return false;
            }
            if (!ok_for_requireds) {
              ok_for_requireds = true;
              requireds = [];
              _ref2 = klass._attrs;
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                attr = _ref2[_k];
                if (_ref3 = model2rform_validators.required, __indexOf.call(klass[attr], _ref3) >= 0) {
                  requireds.push(attr);
                }
              }
              if (requireds.length > 0) {
                dct = {};
                dct['_id'] = id;
                if (path !== '') {
                  dct[path + '.' + requireds[0]] = null;
                } else {
                  dct[requireds[0]] = null;
                }
                if (id === null || klass._collection.find(dct).count() !== 0) {
                  attrs_obj = [];
                  for (attr in obj) {
                    attrs_obj.push(attr.split('.').slice(-1)[0]);
                  }
                  for (_l = 0, _len3 = requireds.length; _l < _len3; _l++) {
                    req = requireds[_l];
                    if (__indexOf.call(attrs_obj, req) < 0) {
                      return false;
                    }
                  }
                }
              }
            }
          } else {
            try {
              klass = klass[v][0].klass;
            } catch (error) {
              return false;
            }
          }
        }
      }
      return true;
    };

    Model.save = function(obj, form_name) {
      var dct, dct_aux, na, name, path, _i, _id_, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4;
      if (obj._path.length === 0) {
        dct = {};
        _ref = obj._dirty;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          dct[name] = obj[name];
        }
        if (obj._id) {
          return this._collection.update({
            _id: obj._id
          }, {
            $set: dct
          });
        } else {
          if (this._nested_arrays) {
            _ref1 = this._nested_arrays;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              na = _ref1[_j];
              dct[na] = [];
            }
          }
          _id_ = this._collection.insert(dct);
          return Session.set(form_name + '_object_id', _id_);
        }
      } else {
        if (obj._path[obj._path.length - 1] === '-1') {
          path = obj._path.slice(0, -1);
          dct_aux = {};
          _ref2 = obj._dirty;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            name = _ref2[_k];
            dct_aux[name] = obj[name];
          }
          if (this._nested_arrays) {
            _ref3 = this._nested_arrays;
            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
              na = _ref3[_l];
              dct_aux[na] = [];
            }
          }
          dct = {};
          dct[path.join('.')] = dct_aux;
          return this._collection.update({
            _id: obj._id
          }, {
            $push: dct
          });
        } else {
          path = obj._path.join('.');
          dct_aux = {};
          _ref4 = obj._dirty;
          for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
            name = _ref4[_m];
            dct_aux[path + '.' + name] = obj[name];
          }
          return this._collection.update({
            _id: obj._id
          }, {
            $set: dct_aux
          });
        }
      }
    };

    return Model;

  })();

  SubModel = (function(_super) {

    __extends(SubModel, _super);

    function SubModel() {
      return SubModel.__super__.constructor.apply(this, arguments);
    }

    return SubModel;

  })(Model);

  this.model2rform_model = {
    Model: Model,
    SubModel: SubModel,
    dct_from_modifier: dct_from_modifier
  };

  if (typeof exports !== 'undefined') {
    exports.model = this.model2rform_model;
  }

}).call(this);
